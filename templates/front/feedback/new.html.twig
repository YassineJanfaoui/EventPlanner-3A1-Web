{% extends 'base.html.twig' %}

{% block title %}New Feedback{% endblock %}

{% block body %}
    <div class="container mt-5 mb-5">
        <div class="row">
            <div class="col-md-8 offset-md-2">
                <!-- Page title with breadcrumbs -->
                <nav aria-label="breadcrumb" class="mb-4">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="{{ path('app_feedback_index') }}" class="text-primary">Feedback</a></li>
                        <li class="breadcrumb-item active text-success">Create New</li>
                    </ol>
                </nav>
                
                <div class="card shadow">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h2 class="mb-0 fs-4">Create New Feedback</h2>
                    </div>
                    <div class="card-body p-4">
                        {% if feedback.sentiment is defined and feedback.sentiment %}
                            <div class="alert alert-info mb-4">
                                <h5 class="mb-2">Sentiment Analysis:</h5>
                                <div class="d-flex align-items-center">
                                    <span class="badge bg-{{ feedback.sentiment == 'positive' ? 'success' : (feedback.sentiment == 'negative' ? 'danger' : 'secondary') }} me-2" style="font-size: 1rem; padding: 8px 12px;">
                                        {{ feedback.sentiment|capitalize }}
                                    </span>
                                    <span class="text-muted">Our AI has analyzed your feedback as {{ feedback.sentiment }}.</span>
                                </div>
                            </div>
                        {% endif %}
                        
                        {{ form_start(form, {'attr': {'class': 'needs-validation'}}) }}
                            {{ form_errors(form) }}
                            
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    {{ form_label(form.event, null, {'label_attr': {'class': 'form-label fw-bold'}}) }}
                                    {{ form_widget(form.event) }}
                                    <div class="text-danger small">
                                        {{ form_errors(form.event) }}
                                    </div>
                                </div>
                                
                                <div class="col-md-6 mb-3">
                                    {{ form_label(form.team, null, {'label_attr': {'class': 'form-label fw-bold'}}) }}
                                    {{ form_widget(form.team, {
                                        'attr': {'class': 'form-select'},
                                        'choice_label': 'TeamName'
                                    }) }}
                                    <div class="text-danger small">
                                        {{ form_errors(form.team) }}
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                {{ form_label(form.rate, null, {'label_attr': {'class': 'form-label fw-bold'}}) }}
                                {{ form_widget(form.rate, {'attr': {'class': 'form-select'}}) }}
                                <div class="text-danger small">
                                    {{ form_errors(form.rate) }}
                                </div>
                            </div>
                            
                            <div class="mb-4">
                                {{ form_label(form.comment, null, {'label_attr': {'class': 'form-label fw-bold'}}) }}
                                {{ form_widget(form.comment) }}
                                <div class="text-danger small">
                                    {{ form_errors(form.comment) }}
                                </div>
                                <div class="form-text mt-1">
                                    <i class="fas fa-robot me-1"></i> Your feedback will be analyzed for sentiment automatically.
                                </div>
                            </div>
                            
                            <hr class="my-4">
                            
                            <div class="d-flex justify-content-between align-items-center">
                                <a href="{{ path('app_feedback_index') }}" class="btn btn-outline-secondary">
                                    <i class="fas fa-arrow-left me-1"></i> Back to List
                                </a>
                                <button type="submit" class="btn btn-success">
                                    <i class="fas fa-save me-1"></i> Create Feedback
                                </button>
                            </div>
                        {{ form_end(form) }}
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .rate-select-hidden {
            position: absolute;
            opacity: 0;
            width: 1px;
            height: 1px;
            margin: -1px;
            border: 0;
            padding: 0;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
        }

        .star-rating {
            font-size: 2.2rem;
            display: inline-flex;
            justify-content: center;
            margin-bottom: 0.5rem;
            width: 100%;
        }

        .star-icon {
            cursor: pointer;
            padding: 0 0.2em;
            transition: color 0.2s ease;
            color: #e0e0e0;
        }

        .star-icon:hover,
        .star-icon.selected {
            color: #dc3545;
        }

        .star-rating:hover .star-icon {
            color: #dc3545;
        }

        .star-rating .star-icon:hover ~ .star-icon {
            color: #e0e0e0;
        }

        .rating-text {
            font-size: 1rem;
            font-weight: 500;
            color: #dc3545;
            text-align: center;
            margin-top: 0.5rem;
            min-height: 24px;
        }
        
        .rating-container {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            border: 1px solid #e9ecef;
            margin-bottom: 1.5rem;
        }
        
        .rating-title {
            font-weight: 600;
            margin-bottom: 1rem;
            color: #343a40;
            text-align: center;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Star rating functionality
            const stars = document.querySelectorAll('.star-icon');
            const ratingSelect = document.querySelector('#{{ form.rate.vars.id }}');
            const ratingText = document.querySelector('.rating-text');
            const ratingTexts = [
                'Click to rate',
                'Poor',
                'Fair',
                'Good',
                'Very Good',
                'Excellent'
            ];
            
            // Set initial state if there's a saved rating
            const initialRating = parseInt(ratingSelect.value) || 0;
            if (initialRating > 0) {
                updateStars(initialRating);
                ratingText.textContent = ratingTexts[initialRating];
            }
            
            // Add click event to each star
            stars.forEach(star => {
                star.addEventListener('click', function() {
                    const value = parseInt(this.getAttribute('data-value'));
                    ratingSelect.value = value;
                    updateStars(value);
                    ratingText.textContent = ratingTexts[value];
                    
                    // Trigger change event on the select for form validation
                    const event = new Event('change', { bubbles: true });
                    ratingSelect.dispatchEvent(event);
                });
                
                // Add hover effect to show rating text
                star.addEventListener('mouseenter', function() {
                    const value = parseInt(this.getAttribute('data-value'));
                    ratingText.textContent = ratingTexts[value];
                });
                
                // Reset text when not hovering over any star
                star.addEventListener('mouseleave', function() {
                    const selectedRating = parseInt(ratingSelect.value) || 0;
                    ratingText.textContent = selectedRating > 0 ? ratingTexts[selectedRating] : ratingTexts[0];
                });
            });
            
            // Function to update the visual state of stars
            function updateStars(rating) {
                stars.forEach(star => {
                    const starValue = parseInt(star.getAttribute('data-value'));
                    if (starValue <= rating) {
                        star.classList.add('selected');
                    } else {
                        star.classList.remove('selected');
                    }
                });
            }
            
            // Sentiment analysis code (keeping your existing code)
            const commentField = document.querySelector('#{{ form.comment.vars.id }}');
            const sentimentContainer = document.createElement('div');
            sentimentContainer.className = 'mt-2 sentiment-analysis-container';
            sentimentContainer.innerHTML = '<div class="d-flex align-items-center">' +
                '<span class="me-2">Sentiment analysis:</span>' +
                '<div id="sentiment-badge"><span class="badge bg-secondary">Waiting for input...</span></div>' +
                '</div>';
            
            // Insert the sentiment container after the comment field
            commentField.parentNode.insertBefore(sentimentContainer, commentField.nextSibling);
            
            let typingTimer;
            const doneTypingInterval = 500; // Wait for 500ms after user stops typing
            
            commentField.addEventListener('input', function() {
                clearTimeout(typingTimer);
                
                const text = this.value.trim();
                if (text.length < 5) {
                    document.getElementById('sentiment-badge').innerHTML = 
                        '<span class="badge bg-secondary">Type more text...</span>';
                    return;
                }
                
                document.getElementById('sentiment-badge').innerHTML = 
                    '<span class="badge bg-secondary"><i class="fas fa-spinner fa-spin"></i> Analyzing...</span>';
                
                typingTimer = setTimeout(function() {
                    analyzeSentiment(text);
                }, doneTypingInterval);
            });
            
            function analyzeSentiment(text) {
                fetch('{{ path('app_feedback_analyze_sentiment') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: 'text=' + encodeURIComponent(text)
                })
                .then(response => response.json())
                .then(data => {
                    // Simply use the pre-formatted badge HTML from the server
                    document.getElementById('sentiment-badge').innerHTML = data.badge;
                })
                .catch(error => {
                    console.error('Error analyzing sentiment:', error);
                    document.getElementById('sentiment-badge').innerHTML = 
                        '<span class="badge bg-danger">Analysis failed</span>';
                });
            }
            
            // Function to update sentiment display - equivalent to Java function
            function updateSentimentDisplay(sentiment) {
                const sentimentBadge = document.getElementById('sentiment-badge');
                const sentimentText = sentiment.toUpperCase();
                
                // Remove all existing sentiment classes
                sentimentBadge.querySelectorAll('.badge').forEach(badge => {
                    badge.classList.remove('bg-success', 'bg-danger', 'bg-secondary');
                });
                
                // Add appropriate class based on sentiment
                let badgeClass = '';
                switch(sentiment.toLowerCase()) {
                    case 'positive':
                        badgeClass = 'bg-success';
                        break;
                    case 'negative':
                        badgeClass = 'bg-danger';
                        break;
                    default:
                        badgeClass = 'bg-secondary';
                }
                
                // Update the badge with new sentiment
                sentimentBadge.innerHTML = `<span class="badge ${badgeClass}" style="font-size: 1rem; padding: 6px 10px;">
                    Sentiment: ${sentimentText}
                </span>`;
                
                // Add animation effect for better user experience
                sentimentBadge.querySelector('.badge').classList.add('animate__animated', 'animate__fadeIn');
            }
        });
    </script>
{% endblock %}
