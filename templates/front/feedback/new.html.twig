{% extends 'base.html.twig' %}

{% block title %}New Feedback{% endblock %}

{% block body %}
    <div class="container mt-5 mb-5">
        <div class="row">
            <div class="col-md-8 offset-md-2">
                <!-- Page title with breadcrumbs -->
                <nav aria-label="breadcrumb" class="mb-4">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="{{ path('app_feedback_index') }}" class="text-primary">Feedback</a></li>
                        <li class="breadcrumb-item active text-success">Create New</li>
                    </ol>
                </nav>
                
                <div class="card shadow">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h2 class="mb-0 fs-4">Create New Feedback</h2>
                    </div>
                    <div class="card-body p-4">
                        {{ form_start(form, {'attr': {'class': 'needs-validation'}}) }}
                            {{ form_errors(form) }}
                            
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    {{ form_label(form.event, null, {'label_attr': {'class': 'form-label fw-bold'}}) }}
                                    {{ form_widget(form.event) }}
                                    <div class="text-danger small">
                                        {{ form_errors(form.event) }}
                                    </div>
                                </div>
                                
                                <div class="col-md-6 mb-3">
                                    {{ form_label(form.team, null, {'label_attr': {'class': 'form-label fw-bold'}}) }}
                                    {{ form_widget(form.team, {
                                        'attr': {'class': 'form-select'},
                                        'choice_label': 'TeamName'
                                    }) }}
                                    <div class="text-danger small">
                                        {{ form_errors(form.team) }}
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                {{ form_label(form.rate, null, {'label_attr': {'class': 'form-label fw-bold'}}) }}
                                {{ form_widget(form.rate, {'attr': {'class': 'form-select'}}) }}
                                <div class="text-danger small">
                                    {{ form_errors(form.rate) }}
                                </div>
                            </div>
                            
                            <div class="mb-4">
                                {{ form_label(form.comment, null, {'label_attr': {'class': 'form-label fw-bold'}}) }}
                                {{ form_widget(form.comment) }}
                                <div class="text-danger small">
                                    {{ form_errors(form.comment) }}
                                </div>
                            </div>
                            
                            <hr class="my-4">
                            
                            <div class="d-flex justify-content-between align-items-center">
                                <a href="{{ path('app_feedback_index') }}" class="btn btn-outline-secondary">
                                    <i class="fas fa-arrow-left me-1"></i> Back to List
                                </a>
                                <button type="submit" class="btn btn-success">
                                    <i class="fas fa-save me-1"></i> Create Feedback
                                </button>
                            </div>
                        {{ form_end(form) }}
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }} {# Keep parent() if base.html.twig defines stylesheets #}
    <style>
        .rate-select-hidden {
            /* Visually hide the select but keep it accessible */
            position: absolute;
            opacity: 0;
            width: 1px;
            height: 1px;
            margin: -1px;
            border: 0;
            padding: 0;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            pointer-events: none; /* Prevent interaction */
        }

        .star-rating {
            font-size: 1.8rem; /* Adjust size as needed */
            color: #ccc; /* Default empty star color */
            display: inline-block; /* Or flex */
        }

        .star-icon {
            cursor: pointer;
            padding: 0 0.1em; /* Spacing between stars */
            transition: color 0.2s ease-in-out;
        }

        /* Styles for when stars are hovered or selected */
        .star-rating:hover .star-icon, /* Highlight all on container hover */
        .star-icon.hovered, /* Individual star hover */
        .star-icon.selected { /* Selected stars */
            color: #FFD700; /* Gold color */
        }

         /* Make stars before the hovered/selected one also highlighted */
        .star-rating:hover .star-icon:hover ~ .star-icon,
        .star-icon.hovered ~ .star-icon,
        .star-icon.selected ~ .star-icon {
             color: #ccc; /* Reset stars after the hovered/selected one */
        }

    </style>
{% endblock %}

{% block javascripts %}
    {# {{ parent() }} - Removed as base.html.twig likely doesn't define this block #}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log("Star Rating: DOMContentLoaded event fired."); // Log: Script start

            const starContainers = document.querySelectorAll('.star-rating');
            console.log(`Star Rating: Found ${starContainers.length} star container(s) with class '.star-rating'.`); // Log: Found containers

            if (starContainers.length === 0) {
                console.warn("Star Rating: No elements with class '.star-rating' found. Stars will not function.");
            }

            starContainers.forEach((container, index) => {
                console.log(`Star Rating: Processing container #${index}`);
                const stars = container.querySelectorAll('.star-icon');
                const targetName = container.getAttribute('data-rating-target'); // Should be 'feedback[rate]'

                if (!targetName) {
                    console.error(`Star Rating: Container #${index} is missing the 'data-rating-target' attribute.`);
                    return; // Skip this container
                }

                // Construct the selector carefully, especially with brackets
                const selector = `select[name="${targetName.replace(/\[/g, '\\[').replace(/\]/g, '\\]')}"]`;
                console.log(`Star Rating: Attempting to find select with selector: ${selector}`);
                const rateInput = document.querySelector(selector);

                if (!rateInput) {
                    console.error(`Star Rating: Could not find select input with name "${targetName}" for container #${index}. Ensure the form field exists and the name matches.`);
                    return; // Skip this container if select not found
                }
                console.log(`Star Rating: Found select input for container #${index}:`, rateInput);

                if (stars.length === 0) {
                     console.error(`Star Rating: No elements with class '.star-icon' found within container #${index}. Check the HTML structure.`);
                     return; // Skip if no stars found
                }
                console.log(`Star Rating: Found ${stars.length} stars in container #${index}.`);

                // Function to update star visuals (filled/empty)
                function updateStarsVisual(ratingValue) {
                    const valueInt = parseInt(ratingValue, 10) || 0;
                    console.log(`Star Rating: Updating visual for container #${index} to value: ${valueInt}`);
                    stars.forEach((star, starIndex) => {
                        const starValue = parseInt(star.getAttribute('data-value'), 10);
                        if (!isNaN(starValue)) {
                            if (starValue <= valueInt) {
                                star.classList.remove('far');
                                star.classList.add('fas');
                                star.classList.add('selected');
                            } else {
                                star.classList.remove('fas');
                                star.classList.add('far');
                                star.classList.remove('selected');
                            }
                            star.classList.remove('hovered'); // Clear any temporary hover state
                        } else {
                             console.warn(`Star Rating: Star #${starIndex} in container #${index} has invalid 'data-value': ${star.getAttribute('data-value')}`);
                        }
                    });
                }

                 // Function to preview stars on hover
                function previewStars(hoverValue) {
                     const valueInt = parseInt(hoverValue, 10) || 0;
                     stars.forEach(star => {
                        const starValue = parseInt(star.getAttribute('data-value'), 10);
                         if (!isNaN(starValue)) {
                            if (starValue <= valueInt) {
                                star.classList.add('hovered');
                                star.classList.remove('far');
                                star.classList.add('fas');
                            } else {
                                star.classList.remove('hovered');
                                if (!star.classList.contains('selected')) {
                                     star.classList.remove('fas');
                                     star.classList.add('far');
                                }
                            }
                        }
                    });
                }

                // --- Initialization ---
                console.log(`Star Rating: Initializing stars for container #${index} with initial select value: '${rateInput.value}'`);
                updateStarsVisual(rateInput.value);

                // --- Event Listeners ---
                stars.forEach((star, starIndex) => {
                    // Click Event
                    star.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent potential default actions
                        event.stopPropagation(); // Stop the event from bubbling up

                        const clickedValue = this.getAttribute('data-value');
                        console.log(`Star Rating: CLICK detected on star #${starIndex} (value: ${clickedValue}) in container #${index}.`);

                        // Check if value exists in select options
                        const isValidOption = Array.from(rateInput.options).some(option => option.value === clickedValue);
                        console.log(`Star Rating: Is value '${clickedValue}' a valid option in the select? ${isValidOption}`);

                        if (isValidOption) {
                            rateInput.value = clickedValue;
                            console.log(`Star Rating: Set hidden select value to: '${rateInput.value}'`);
                            updateStarsVisual(clickedValue); // Update visual *after* setting value
                            // Optional: Trigger change event if needed elsewhere
                            rateInput.dispatchEvent(new Event('change', { bubbles: true }));
                            console.log(`Star Rating: Dispatched 'change' event on select.`);
                        } else {
                             console.error(`Star Rating: Clicked value '${clickedValue}' is not a valid <option> value in select[name="${targetName}"]. Check FeedbackType choices.`);
                        }
                    });

                    // Hover Events
                    star.addEventListener('mouseover', function() {
                        const hoverValue = this.getAttribute('data-value');
                        // console.log(`Star Rating: Hover over star #${starIndex} (value: ${hoverValue}) in container #${index}.`); // Uncomment for detailed hover debugging
                        previewStars(hoverValue);
                    });
                }); // End stars.forEach

                 // Mouseleave from the container resets hover preview
                container.addEventListener('mouseleave', function() {
                    // console.log(`Star Rating: Mouse left container #${index}. Resetting visual to selected value.`); // Uncomment for detailed hover debugging
                    updateStarsVisual(rateInput.value);
                });
            }); // End starContainers.forEach

            console.log("Star Rating: Script finished initialization."); // Log: Script end
        });
    </script>
{% endblock %}
