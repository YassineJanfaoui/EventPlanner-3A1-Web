{% extends 'basePlanner.html.twig' %}

{% block title %}Venue Map{% endblock %}

{% block body %}
    <div class="container mt-4">
        <h2 class="mb-4">Venue Map</h2>
        <div id="venue-map" style="height: 600px; border: 1px solid #ddd; border-radius: 8px;"></div>
    </div>
    <a href="{{ path('app_venue_index') }}" class="btn btn-primary btn-sm">back to list</a>
{% endblock %}

{% block js %}
    {{ parent() }}
    
    <!-- Leaflet CSS/JS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<!-- Marker Cluster CSS/JS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css" />
    <script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const map = L.map('venue-map').setView([48.8566, 2.3522], 6);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);

            // Create marker cluster group
            const markers = L.markerClusterGroup({
                spiderfyOnMaxZoom: true,
                showCoverageOnHover: false,
                zoomToBoundsOnClick: true
            });

            const venues = {{ venue_map_data|json_encode()|raw }};
            
            // Custom icons
            const availableIcon = new L.Icon({
                iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            });

            const unavailableIcon = new L.Icon({
                iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            });

            venues.forEach(venue => {
                if (venue.lat && venue.lng) {
                    const marker = L.marker([venue.lat, venue.lng], {
                        icon: venue.parking === 'Available' ? availableIcon : unavailableIcon
                    });

                    const popupContent = `
                        <div style="min-width:200px">
                            <h4 style="cursor:pointer;color:#007bff;" 
                                onclick="window.location.href='/venue/${venue.id}'">
                                ${venue.name || 'Unnamed Venue'}
                            </h4>
                            <hr>
                            <p><strong>Capacity:</strong> ${venue.nbrPlaces ?? 'N/A'}</p>
                            <p><strong>Price:</strong> ${venue.cost ? 'â‚¬' + venue.cost + '/day' : 'Not specified'}</p>
                            <p><strong>Parking:</strong> 
                                <span style="color:${venue.parking === 'Available' ? 'green' : 'red'}">
                                    ${venue.parking || 'Unknown'}
                                </span>
                            </p>
                            <button onclick="window.location.href='/venue/${venue.id}'" 
                                    class="btn btn-sm btn-primary mt-2">
                                View Details
                            </button>
                        </div>
                    `;

                    marker
                        .bindPopup(popupContent)
                        .setTooltipContent(venue.name || 'Venue');
                    
                    markers.addLayer(marker);
                }
            });

            map.addLayer(markers);

            // Auto-fit to show all markers
            if (venues.length > 0) {
                map.fitBounds(markers.getBounds().pad(0.2));
            }
        });
    </script>
{% endblock %}