{% extends 'basePlanner.html.twig' %}

{% block title %}Bill List
{% endblock %}

{% block body %}
	<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
	<script>
		document.addEventListener('DOMContentLoaded', function () {
let currentCurrency = 'USD';
const currencyRates = {
USD: 1,
EUR: {{ bill_service.convert(1, 'USD', 'EUR') }},
CNY: {{ bill_service.convert(1, 'USD', 'CNY') }}
};

function convertCurrency(newCurrency) {
currentCurrency = newCurrency;
const rows = document.querySelectorAll('tbody tr');
const currencySymbols = {
USD: '$',
EUR: '€',
CNY: '¥'
};

rows.forEach(row => {
const amountCell = row.querySelector('td:nth-child(2)');
if (amountCell) {
const originalAmount = parseFloat(amountCell.dataset.originalAmount);
const convertedAmount = (originalAmount * currencyRates[newCurrency]).toFixed(2);
amountCell.textContent = `${convertedAmount}${
currencySymbols[newCurrency]
}`;
}
});

document.getElementById('currency-toggle').textContent = `Currency: ${currentCurrency}`;
}

window.convertCurrency = convertCurrency;

// AJAX functionality
const searchInput = document.querySelector('input[name="q"]');
const archivedSelect = document.querySelector('select[name="archived"]');
const tableContainer = document.getElementById('billTableContainer');

searchInput.addEventListener('input', debounce(updateResults, 500));
archivedSelect.addEventListener('change', updateResults);

// Handle pagination clicks
tableContainer.addEventListener('click', function (e) {
if (e.target.closest('.page-link')) {
e.preventDefault();
const page = e.target.closest('.page-link').getAttribute('data-page');
updateResults(page);
}
});

// Update the debounce function to properly handle the input event:
function debounce(func, wait) {
let timeout;
return function (event) { // Accept the event parameter
const context = this;
const args = arguments;
clearTimeout(timeout);
timeout = setTimeout(function () {
func.apply(context, [1]); // Always pass page 1 for search input changes
}, wait);
};
}

// Update the updateResults function to ensure proper parameter handling:
function updateResults(page = 1) { // Ensure page is a number
page = parseInt(page) || 1;

const params = new URLSearchParams({
q: searchInput.value,
archived: archivedSelect.value,
ajax: 1,
page: page,
sort_by: '{{ sort_by|default('') }}',
direction: '{{ sort_direction|default('ASC') }}'
});

fetch (`{{ path('app_bill_index') }}?${
params.toString()
}`, {
headers: {
'X-Requested-With': 'XMLHttpRequest'
}
}).then(response => {
if (!response.ok) {
throw new Error (`HTTP error! status: ${
response.status
}`);
}
return response.text();
}).then(html => {
tableContainer.innerHTML = html;
convertCurrency(currentCurrency);
}).catch(error => {
console.error('Error fetching results:', error);
// Optional: Show user-friendly error message
});
}
});
	</script>

	<style>
		.equipment-id-link {
			color: black;
			font-weight: bold;
			padding: none;
			text-decoration: none;
			transition: all 0.6s ease;
		}

		.equipment-id-link:hover {
			color: blue;
		}
		.title {
			text-align: center;
			font-weight: bold;
			margin-top: 20px;
		}
		.filter {
			margin-left: 12.5%;
			margin-top: 20px;
		}
		th,
		td {
			text-align: center;
		}
	</style>

	<h1 class="title">Bill List</h1>
	<form method="get" action="{{ path('app_bill_index') }}" class="mb-4 filter">
		<div class="row g-3">
			<div class="col-md-2">
				<button type="button" id="currency-toggle" class="btn btn-primary" onclick="cycleCurrency()">Currency: USD</button>
			</div>
			<div class="col-md-4">
				<input type="text" name="q" class="form-control" placeholder="Search bills..." value="{{ search_query|default('') }}">
			</div>

			<div class="col-md-3">
				<select name="archived" class="form-select" onchange="this.form.submit()">
					<option value="1" {% if archived_filter is not null and archived_filter == 1 %} selected {% endif %}>
						Archived
					</option>
					<option value="0" {% if archived_filter is not null and archived_filter == 0 %} selected {% endif %}>
						Active
					</option>
				</select>
			</div>

			<div class="col-md-2">
				<a href="{{ path('app_bill_index') }}" class="btn btn-primary">Reset</a>
			</div>
		</div>
	</form>

	<div id="billTableContainer">
		{{ include('bill/_table.html.twig') }}
	</div>

	<a href="{{ path('app_bill_new') }}" class="btn btn-primary" style="width:25%; margin-left:37.5%; display:block; margin-top:10px;">
		Create new
	</a>

	<script>
		function cycleCurrency() {
const current = document.getElementById('currency-toggle').textContent;
const currencies = ['USD', 'EUR', 'CNY'];
const currentIndex = currencies.indexOf(current.replace('Currency: ', ''));
const nextIndex = (currentIndex + 1) % currencies.length;
convertCurrency(currencies[nextIndex]);
}
	</script>
{% endblock %}
